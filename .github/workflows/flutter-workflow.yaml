name: Flutter

on:
  # Runs this action when you push on main
  push:
    branches: [ "master" ]

jobs:
  flutter_job:
    # The machine, we can also use windows-latest or macos-latest
    runs-on: ubuntu-latest

    steps:
      # Clones the project on the machine
      - uses: actions/checkout@v4

      # Sets up Java 11
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '18'

      # Installs Flutter and related dependencies on this machine
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          # flutter-version: '3.16.8'
          # ^ If you want to use a specific version of Flutter

#
#      - name: Create env file
#        run: cat .env | base64
#
#      - name: 'Copy file content'
#        env:
#          DATA: ${{ secrets.CONSTANTS }}
#        run: echo $DATA > .env
#
#      - name: Create env file
#        run: cat android/key.properties | base64
#
#      - name: 'Copy file content'
#        env:
#          DATA: ${{ secrets.KEY_PROPERTIES }}
#        run: echo $DATA > android/key.properties
#      # Fetches project dependencies from pub
      - name: Install dependencies
        run: flutter pub get

      # Verifies if the Dart code is formatted well
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        # --set-exit-if-changed stops execution if any code is not well formatted
        # --output=none prints files which need to be formatted

      # Checks for semantic errors. Can be configured using analysis_options.yaml
      - name: Analyze project source
        run: flutter analyze --no-fatal-infos --no-fatal-warnings
        # optionally use --fatal-warnings to stop execution if any warnings are found

      # Runs unit tests
      #      - name: Run tests
      #        run: flutter test

      # Create Android APK split by ABI
      - name: Build APK split by ABI
        run: flutter build apk --split-per-abi

      # Upload built APKs as artifacts
      - name: Upload APKs
        uses: actions/upload-artifact@v1
        with:
          name: app-armeabi-v7a
          path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
      - name: Upload APKs
        uses: actions/upload-artifact@v1
        with:
          name: app-arm64-v8a
          path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
      - name: Upload APKs
        uses: actions/upload-artifact@v1
        with:
          name: app-x86_64
          path: build/app/outputs/flutter-apk/app-x86_64-release.apk

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.1 #${{ steps.next_version.outputs.next_version }}
          release_name: Release v1.0.1 #${{ steps.next_version.outputs.next_version }}
          draft: false
          prerelease: false

      - name: Upload ARMv7 APK
        id: upload-armv7-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          asset_name: app-armeabi-v7a-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload ARM64 APK
        id: upload-arm64-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          asset_name: app-arm64-v8a-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload x86_64 APK
        id: upload-x86_64-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-x86_64-release.apk
          asset_name: app-x86_64-release.apk
          asset_content_type: application/vnd.android.package-archive
